{
  "version": 3,
  "names": [
    "React",
    "useRef",
    "forwardRef",
    "useImperativeHandle",
    "useCodeMirror",
    "ReactCodeMirror",
    "props",
    "ref",
    "className",
    "value",
    "selection",
    "extensions",
    "onChange",
    "onStatistics",
    "onCreateEditor",
    "onUpdate",
    "autoFocus",
    "theme",
    "height",
    "minHeight",
    "maxHeight",
    "width",
    "minWidth",
    "maxWidth",
    "basicSetup",
    "placeholder",
    "indentWithTab",
    "editable",
    "readOnly",
    "root",
    "initialState",
    "other",
    "editor",
    "state",
    "view",
    "container",
    "setContainer",
    "current",
    "Error",
    "defaultClassNames",
    "displayName"
  ],
  "sources": [
    "../src/index.tsx"
  ],
  "sourcesContent": [
    "import React, { useRef, forwardRef, useImperativeHandle } from 'react';\nimport { EditorState, EditorStateConfig, Extension, StateField } from '@codemirror/state';\nimport { EditorView, ViewUpdate } from '@codemirror/view';\nimport { BasicSetupOptions } from '@uiw/codemirror-extensions-basic-setup';\nimport { useCodeMirror } from './useCodeMirror';\nimport { Statistics } from './utils';\n\nexport * from '@uiw/codemirror-extensions-basic-setup';\nexport * from './useCodeMirror';\nexport * from './utils';\n\nexport interface ReactCodeMirrorProps\n  extends Omit<EditorStateConfig, 'doc' | 'extensions'>,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'placeholder'> {\n  /** value of the auto created model in the editor. */\n  value?: string;\n  height?: string;\n  minHeight?: string;\n  maxHeight?: string;\n  width?: string;\n  minWidth?: string;\n  maxWidth?: string;\n  /** focus on the editor. */\n  autoFocus?: boolean;\n  /** Enables a placeholder—a piece of example content to show when the editor is empty. */\n  placeholder?: string | HTMLElement;\n  /**\n   * `light` / `dark` / `Extension` Defaults to `light`.\n   * @default light\n   */\n  theme?: 'light' | 'dark' | 'none' | Extension;\n  /**\n   * Whether to optional basicSetup by default\n   * @default true\n   */\n  basicSetup?: boolean | BasicSetupOptions;\n  /**\n   * This disables editing of the editor content by the user.\n   * @default true\n   */\n  editable?: boolean;\n  /**\n   * This disables editing of the editor content by the user.\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * Whether to optional basicSetup by default\n   * @default true\n   */\n  indentWithTab?: boolean;\n  /** Fired whenever a change occurs to the document. */\n  onChange?(value: string, viewUpdate: ViewUpdate): void;\n  /** Some data on the statistics editor. */\n  onStatistics?(data: Statistics): void;\n  /** Fired whenever any state change occurs within the editor, including non-document changes like lint results. */\n  onUpdate?(viewUpdate: ViewUpdate): void;\n  /** The first time the editor executes the event. */\n  onCreateEditor?(view: EditorView, state: EditorState): void;\n  /**\n   * Extension values can be [provided](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions) when creating a state to attach various kinds of configuration and behavior information.\n   * They can either be built-in extension-providing objects,\n   * such as [state fields](https://codemirror.net/6/docs/ref/#state.StateField) or [facet providers](https://codemirror.net/6/docs/ref/#state.Facet.of),\n   * or objects with an extension in its `extension` property. Extensions can be nested in arrays arbitrarily deep—they will be flattened when processed.\n   */\n  extensions?: Extension[];\n  /**\n   * If the view is going to be mounted in a shadow root or document other than the one held by the global variable document (the default), you should pass it here.\n   * Originally from the [config of EditorView](https://codemirror.net/6/docs/ref/#view.EditorView.constructor%5Econfig.root)\n   */\n  root?: ShadowRoot | Document;\n  /**\n   * Create a state from its JSON representation serialized with [toJSON](https://codemirror.net/docs/ref/#state.EditorState.toJSON) function\n   */\n  initialState?: {\n    json: any;\n    fields?: Record<string, StateField<any>>;\n  };\n}\n\nexport interface ReactCodeMirrorRef {\n  editor?: HTMLDivElement | null;\n  state?: EditorState;\n  view?: EditorView;\n}\n\nconst ReactCodeMirror = forwardRef<ReactCodeMirrorRef, ReactCodeMirrorProps>((props, ref) => {\n  const {\n    className,\n    value = '',\n    selection,\n    extensions = [],\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    autoFocus,\n    theme = 'light',\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    readOnly,\n    root,\n    initialState,\n    ...other\n  } = props;\n  const editor = useRef<HTMLDivElement>(null);\n  const { state, view, container, setContainer } = useCodeMirror({\n    container: editor.current,\n    root,\n    value,\n    autoFocus,\n    theme,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    readOnly,\n    selection,\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    extensions,\n    initialState,\n  });\n\n  useImperativeHandle(ref, () => ({ editor: editor.current, state: state, view: view }), [\n    editor,\n    container,\n    state,\n    view,\n  ]);\n\n  // check type of value\n  if (typeof value !== 'string') {\n    throw new Error(`value must be typeof string but got ${typeof value}`);\n  }\n\n  const defaultClassNames = typeof theme === 'string' ? `cm-theme-${theme}` : 'cm-theme';\n  return <div ref={editor} className={`${defaultClassNames}${className ? ` ${className}` : ''}`} {...other}></div>;\n});\n\nReactCodeMirror.displayName = 'CodeMirror';\n\nexport default ReactCodeMirror;\n"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,UAAU,EAAEC,mBAAmB,QAAQ,OAAO;AAItE,SAASC,aAAa,QAAQ,iBAAiB;AAAC;AAGhD,cAAc,wCAAwC;AACtD,cAAc,iBAAiB;AAC/B,cAAc,SAAS;AA6EvB,IAAMC,eAAe,gBAAGH,UAAU,CAA2C,CAACI,KAAK,EAAEC,GAAG,KAAK;EAC3F,IAAM;MACJC,SAAS;MACTC,KAAK,GAAG,EAAE;MACVC,SAAS;MACTC,UAAU,GAAG,EAAE;MACfC,QAAQ;MACRC,YAAY;MACZC,cAAc;MACdC,QAAQ;MACRC,SAAS;MACTC,KAAK,GAAG,OAAO;MACfC,MAAM;MACNC,SAAS;MACTC,SAAS;MACTC,KAAK;MACLC,QAAQ;MACRC,QAAQ;MACRC,UAAU;MACVC,WAAW;MACXC,aAAa;MACbC,QAAQ;MACRC,QAAQ;MACRC,IAAI;MACJC;IAEF,CAAC,GAAGxB,KAAK;IADJyB,KAAK,iCACNzB,KAAK;EACT,IAAM0B,MAAM,GAAG/B,MAAM,CAAiB,IAAI,CAAC;EAC3C,IAAM;IAAEgC,KAAK;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGhC,aAAa,CAAC;IAC7D+B,SAAS,EAAEH,MAAM,CAACK,OAAO;IACzBR,IAAI;IACJpB,KAAK;IACLO,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,SAAS;IACTC,SAAS;IACTC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,UAAU;IACVC,WAAW;IACXC,aAAa;IACbC,QAAQ;IACRC,QAAQ;IACRlB,SAAS;IACTE,QAAQ;IACRC,YAAY;IACZC,cAAc;IACdC,QAAQ;IACRJ,UAAU;IACVmB;EACF,CAAC,CAAC;EAEF3B,mBAAmB,CAACI,GAAG,EAAE,OAAO;IAAEyB,MAAM,EAAEA,MAAM,CAACK,OAAO;IAAEJ,KAAK,EAAEA,KAAK;IAAEC,IAAI,EAAEA;EAAK,CAAC,CAAC,EAAE,CACrFF,MAAM,EACNG,SAAS,EACTF,KAAK,EACLC,IAAI,CACL,CAAC;;EAEF;EACA,IAAI,OAAOzB,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAI6B,KAAK,0CAAwC,OAAO7B,KAAK,CAAG;EACxE;EAEA,IAAM8B,iBAAiB,GAAG,OAAOtB,KAAK,KAAK,QAAQ,iBAAeA,KAAK,GAAK,UAAU;EACtF,oBAAO;IAAK,GAAG,EAAEe,MAAO;IAAC,SAAS,OAAKO,iBAAiB,IAAG/B,SAAS,SAAOA,SAAS,GAAK,EAAE;EAAG,GAAKuB,KAAK,EAAQ;AAClH,CAAC,CAAC;AAEF1B,eAAe,CAACmC,WAAW,GAAG,YAAY;AAE1C,eAAenC,eAAe"
}