/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var useIsomorphicEffect = require('../../internal/useIsomorphicEffect.js');
var useMergedRefs = require('../../internal/useMergedRefs.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["align", "as", "autoAlign", "caret", "className", "children", "dropShadow", "highContrast", "open"],
    _excluded2 = ["className", "children"];
var PopoverContext = /*#__PURE__*/React__default["default"].createContext({
  floating: {
    current: null
  }
});
var Popover = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, forwardRef) {
  var _cx;

  var _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'bottom' : _ref$align,
      as = _ref.as,
      _ref$autoAlign = _ref.autoAlign,
      autoAlign = _ref$autoAlign === void 0 ? false : _ref$autoAlign,
      _ref$caret = _ref.caret,
      caret = _ref$caret === void 0 ? true : _ref$caret,
      customClassName = _ref.className,
      children = _ref.children,
      _ref$dropShadow = _ref.dropShadow,
      dropShadow = _ref$dropShadow === void 0 ? true : _ref$dropShadow,
      _ref$highContrast = _ref.highContrast,
      highContrast = _ref$highContrast === void 0 ? false : _ref$highContrast,
      open = _ref.open,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();
  var floating = React.useRef(null);
  var popover = React.useRef(null);
  var value = React.useMemo(function () {
    return {
      floating: floating
    };
  }, []);
  var ref = useMergedRefs.useMergedRefs([forwardRef, popover]);

  var _useState = React.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      autoAligned = _useState2[0],
      setAutoAligned = _useState2[1];

  var _useState3 = React.useState(align),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      autoAlignment = _useState4[0],
      setAutoAlignment = _useState4[1];

  var className = cx__default["default"]((_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--popover-container"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--popover--caret"), caret), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--popover--drop-shadow"), dropShadow), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--popover--high-contrast"), highContrast), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--popover--open"), open), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--popover--").concat(autoAlignment), autoAligned), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--popover--").concat(align), !autoAligned), _cx), customClassName);
  useIsomorphicEffect["default"](function () {
    if (!open) {
      return;
    }

    if (!autoAlign) {
      setAutoAligned(false);
      return;
    }

    if (!floating.current) {
      return;
    }

    if (autoAligned === true) {
      return;
    }

    var rect = floating.current.getBoundingClientRect(); // The conditions, per side, of when the popover is not visible, excluding the popover's internal padding(16)

    var conditions = {
      left: rect.x < -16,
      top: rect.y < -16,
      right: rect.x + (rect.width - 16) > document.documentElement.clientWidth,
      bottom: rect.y + (rect.height - 16) > document.documentElement.clientHeight
    };

    if (!conditions.left && !conditions.top && !conditions.right && !conditions.bottom) {
      setAutoAligned(false);
      return;
    }

    var alignments = ['top', 'top-left', 'right-bottom', 'right', 'right-top', 'bottom-left', 'bottom', 'bottom-right', 'left-top', 'left', 'left-bottom', 'top-right']; // Creates the prioritized list of options depending on ideal alignment coming from `align`

    var options = [align];
    var option = alignments[(alignments.indexOf(align) + 1) % alignments.length];

    while (option) {
      if (options.includes(option)) {
        break;
      }

      options.push(option);
      option = alignments[(alignments.indexOf(option) + 1) % alignments.length];
    }

    function isVisible(alignment) {
      if (!popover.current || !floating.current) {
        return false;
      }

      popover.current.classList.add("".concat(prefix, "--popover--").concat(alignment));
      var rect = floating.current.getBoundingClientRect(); // Check if popover is not visible to the left of the screen

      if (rect.x < -16) {
        popover.current.classList.remove("".concat(prefix, "--popover--").concat(alignment));
        return false;
      } // Check if popover is not visible at the top of the screen


      if (rect.y < -16) {
        popover.current.classList.remove("".concat(prefix, "--popover--").concat(alignment));
        return false;
      } // Check if popover is not visible to right of screen


      if (rect.x + (rect.width - 16) > document.documentElement.clientWidth) {
        popover.current.classList.remove("".concat(prefix, "--popover--").concat(alignment));
        return false;
      } // Check if popover is not visible to bottom of screen


      if (rect.y + (rect.height - 16) > document.documentElement.clientHeight) {
        popover.current.classList.remove("".concat(prefix, "--popover--").concat(alignment));
        return false;
      }

      popover.current.classList.remove("".concat(prefix, "--popover--").concat(alignment));
      return true;
    }

    var alignment = null;

    for (var i = 0; i < options.length; i++) {
      var _option = options[i];

      if (isVisible(_option)) {
        alignment = _option;
        break;
      }
    }

    if (alignment) {
      setAutoAligned(true);
      setAutoAlignment(alignment);
    }
  }, [autoAligned, align, autoAlign, prefix, open]);
  var BaseComponent = as !== null && as !== void 0 ? as : 'span';
  return /*#__PURE__*/React__default["default"].createElement(PopoverContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: className,
    ref: ref
  }), children));
}); // Note: this displayName is temporarily set so that Storybook ArgTable
// correctly displays the name of this component

if (process.env.NODE_ENV !== "production") {
  Popover.displayName = 'Popover';
}

Popover.propTypes = {
  /**
   * Specify how the popover should align with the trigger element
   */
  align: PropTypes__default["default"].oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top']),

  /**
   * Provide a custom element or component to render the top-level node for the
   * component.
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType]),

  /**
   * Will auto-align the popover on first render if it is not visible. This prop is currently experimental and is subject to futurue changes.
   */
  autoAlign: PropTypes__default["default"].bool,

  /**
   * Specify whether a caret should be rendered
   */
  caret: PropTypes__default["default"].bool,

  /**
   * Provide elements to be rendered inside of the component
   */
  children: PropTypes__default["default"].node,

  /**
   * Provide a custom class name to be added to the outermost node in the
   * component
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether a drop shadow should be rendered on the popover
   */
  dropShadow: PropTypes__default["default"].bool,

  /**
   * Render the component using the high-contrast variant
   */
  highContrast: PropTypes__default["default"].bool,

  /**
   * Specify whether the component is currently open or closed
   */
  open: PropTypes__default["default"].bool.isRequired
};
var PopoverContent = /*#__PURE__*/React__default["default"].forwardRef(function PopoverContent(_ref2, forwardRef) {
  var className = _ref2.className,
      children = _ref2.children,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref2, _excluded2);

  var prefix = usePrefix.usePrefix();

  var _React$useContext = React__default["default"].useContext(PopoverContext),
      floating = _React$useContext.floating;

  var ref = useMergedRefs.useMergedRefs([floating, forwardRef]);
  return /*#__PURE__*/React__default["default"].createElement("span", _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: "".concat(prefix, "--popover")
  }), /*#__PURE__*/React__default["default"].createElement("span", {
    className: cx__default["default"]("".concat(prefix, "--popover-content"), className),
    ref: ref
  }, children), /*#__PURE__*/React__default["default"].createElement("span", {
    className: "".concat(prefix, "--popover-caret")
  }));
});
PopoverContent.propTypes = {
  /**
   * Provide elements to be rendered inside of the component
   */
  children: PropTypes__default["default"].node,

  /**
   * Provide a custom class name to be added to the outermost node in the
   * component
   */
  className: PropTypes__default["default"].string
};

exports.Popover = Popover;
exports.PopoverContent = PopoverContent;
