/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var iconsReact = require('@carbon/icons-react');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var useMergedRefs = require('../../internal/useMergedRefs.js');
var useNormalizedInputProps = require('../../internal/useNormalizedInputProps.js');
var usePrefix = require('../../internal/usePrefix.js');
var deprecate = require('../../prop-types/deprecate.js');
require('../FluidForm/FluidForm.js');
var FormContext = require('../FluidForm/FormContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["allowEmpty", "className", "disabled", "disableWheel", "defaultValue", "helperText", "hideLabel", "hideSteppers", "iconDescription", "id", "label", "invalid", "invalidText", "light", "max", "min", "onChange", "onClick", "onKeyUp", "readOnly", "size", "step", "translateWithId", "warn", "warnText", "value"];

var _defaultTranslations, _Subtract, _Add;
var translationIds = {
  'increment.number': 'increment.number',
  'decrement.number': 'decrement.number'
};
var defaultTranslations = (_defaultTranslations = {}, _rollupPluginBabelHelpers.defineProperty(_defaultTranslations, translationIds['increment.number'], 'Increment number'), _rollupPluginBabelHelpers.defineProperty(_defaultTranslations, translationIds['decrement.number'], 'Decrement number'), _defaultTranslations);
var NumberInput = /*#__PURE__*/React__default["default"].forwardRef(function NumberInput(props, forwardRef) {
  var _cx, _cx3, _cx4;

  var _props$allowEmpty = props.allowEmpty,
      allowEmpty = _props$allowEmpty === void 0 ? false : _props$allowEmpty,
      customClassName = props.className,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$disableWheel = props.disableWheel,
      disableWheelProp = _props$disableWheel === void 0 ? false : _props$disableWheel,
      defaultValue = props.defaultValue,
      _props$helperText = props.helperText,
      helperText = _props$helperText === void 0 ? '' : _props$helperText,
      _props$hideLabel = props.hideLabel,
      hideLabel = _props$hideLabel === void 0 ? false : _props$hideLabel,
      hideSteppers = props.hideSteppers,
      iconDescription = props.iconDescription,
      id = props.id,
      label = props.label,
      _props$invalid = props.invalid,
      invalid = _props$invalid === void 0 ? false : _props$invalid,
      invalidText = props.invalidText,
      light = props.light,
      max = props.max,
      min = props.min,
      onChange = props.onChange,
      _onClick = props.onClick,
      onKeyUp = props.onKeyUp,
      readOnly = props.readOnly,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      _props$translateWithI = props.translateWithId,
      t = _props$translateWithI === void 0 ? function (id) {
    return defaultTranslations[id];
  } : _props$translateWithI,
      _props$warn = props.warn,
      warn = _props$warn === void 0 ? false : _props$warn,
      _props$warnText = props.warnText,
      warnText = _props$warnText === void 0 ? '' : _props$warnText,
      controlledValue = props.value,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  var prefix = usePrefix.usePrefix();

  var _useContext = React.useContext(FormContext.FormContext),
      isFluid = _useContext.isFluid;

  var _useState = React.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var _useState3 = React.useState(function () {
    if (controlledValue !== undefined) {
      return controlledValue;
    }

    if (defaultValue !== undefined) {
      return defaultValue;
    }

    return 0;
  }),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];

  var _useState5 = React.useState(controlledValue),
      _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
      prevControlledValue = _useState6[0],
      setPrevControlledValue = _useState6[1];

  var inputRef = React.useRef(null);
  var ref = useMergedRefs.useMergedRefs([forwardRef, inputRef]);
  var numberInputClasses = cx__default["default"]((_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--number"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--number--helpertext"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--number--readonly"), readOnly), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--number--light"), light), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--number--nolabel"), hideLabel), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--number--nosteppers"), hideSteppers), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--number--").concat(size), size), _cx));
  var isInputValid = getInputValidity({
    allowEmpty: allowEmpty,
    invalid: invalid,
    value: value,
    max: max,
    min: min
  });
  var normalizedProps = useNormalizedInputProps.useNormalizedInputProps({
    id: id,
    readOnly: readOnly,
    disabled: disabled,
    invalid: !isInputValid,
    invalidText: invalidText,
    warn: warn,
    warnText: warnText
  });
  var _ref = [t('increment.number'), t('decrement.number')],
      incrementNumLabel = _ref[0],
      decrementNumLabel = _ref[1];
  var wrapperClasses = cx__default["default"]("".concat(prefix, "--number__input-wrapper"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--number__input-wrapper--warning"), normalizedProps.warn));
  var iconClasses = cx__default["default"]((_cx3 = {}, _rollupPluginBabelHelpers.defineProperty(_cx3, "".concat(prefix, "--number__invalid"), normalizedProps.invalid || normalizedProps.warn), _rollupPluginBabelHelpers.defineProperty(_cx3, "".concat(prefix, "--number__invalid--warning"), normalizedProps.warn), _cx3));

  if (controlledValue !== prevControlledValue) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    setValue(controlledValue);
    setPrevControlledValue(controlledValue);
  }

  var ariaDescribedBy = undefined;

  if (normalizedProps.invalid) {
    ariaDescribedBy = normalizedProps.invalidId;
  }

  if (normalizedProps.warn) {
    ariaDescribedBy = normalizedProps.warnId;
  }

  function handleOnChange(event) {
    if (disabled) {
      return;
    }

    var state = {
      value: event.target.value,
      direction: value < event.target.value ? 'up' : 'down'
    };
    setValue(state.value);

    if (onChange) {
      onChange(event, state);
    }
  }

  var handleFocus = function handleFocus(evt) {
    if ('type' in evt.target && evt.target.type === 'button') {
      setIsFocused(false);
    } else {
      setIsFocused(evt.type === 'focus' ? true : false);
    }
  };

  var outerElementClasses = cx__default["default"]("".concat(prefix, "--form-item"), (_cx4 = {}, _rollupPluginBabelHelpers.defineProperty(_cx4, customClassName, !!customClassName), _rollupPluginBabelHelpers.defineProperty(_cx4, "".concat(prefix, "--number-input--fluid--invalid"), isFluid && normalizedProps.invalid), _rollupPluginBabelHelpers.defineProperty(_cx4, "".concat(prefix, "--number-input--fluid--focus"), isFluid && isFocused), _rollupPluginBabelHelpers.defineProperty(_cx4, "".concat(prefix, "--number-input--fluid--disabled"), isFluid && disabled), _cx4));
  var Icon = normalizedProps.icon;
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: outerElementClasses,
    onFocus: isFluid ? handleFocus : undefined,
    onBlur: isFluid ? handleFocus : undefined
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: numberInputClasses,
    "data-invalid": normalizedProps.invalid ? true : undefined
  }, /*#__PURE__*/React__default["default"].createElement(Label, {
    disabled: normalizedProps.disabled,
    hideLabel: hideLabel,
    id: id,
    label: label
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/React__default["default"].createElement("input", _rollupPluginBabelHelpers["extends"]({}, rest, {
    "data-invalid": normalizedProps.invalid ? true : undefined,
    "aria-invalid": normalizedProps.invalid,
    "aria-describedby": ariaDescribedBy,
    disabled: normalizedProps.disabled,
    ref: ref,
    id: id,
    max: max,
    min: min,
    onClick: _onClick,
    onChange: handleOnChange,
    onKeyUp: onKeyUp,
    onFocus: function onFocus(e) {
      if (disableWheelProp) {
        e.target.addEventListener('wheel', disableWheel);
      }

      if (rest.onFocus) {
        rest.onFocus(e);
      }
    },
    onBlur: function onBlur(e) {
      if (disableWheelProp) {
        e.target.removeEventListener('wheel', disableWheel);
      }

      if (rest.onBlur) {
        rest.onBlur(e);
      }
    },
    pattern: "[0-9]*",
    readOnly: readOnly,
    step: step,
    type: "number",
    value: value
  })), Icon ? /*#__PURE__*/React__default["default"].createElement(Icon, {
    className: iconClasses
  }) : null, !hideSteppers && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--number__controls")
  }, /*#__PURE__*/React__default["default"].createElement("button", {
    "aria-label": decrementNumLabel || iconDescription,
    className: "".concat(prefix, "--number__control-btn down-icon"),
    disabled: disabled || readOnly,
    onClick: function onClick(event) {
      var state = {
        value: clamp(max, min, parseInt(value) - step),
        direction: 'down'
      };
      setValue(state.value);

      if (onChange) {
        onChange(event, state);
      }

      if (_onClick) {
        _onClick(event, state);
      }
    },
    tabIndex: -1,
    title: decrementNumLabel || iconDescription,
    type: "button"
  }, _Subtract || (_Subtract = /*#__PURE__*/React__default["default"].createElement(iconsReact.Subtract, {
    className: "down-icon"
  }))), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--number__rule-divider")
  }), /*#__PURE__*/React__default["default"].createElement("button", {
    "aria-label": incrementNumLabel || iconDescription,
    className: "".concat(prefix, "--number__control-btn up-icon"),
    disabled: disabled || readOnly,
    onClick: function onClick(event) {
      var state = {
        value: clamp(max, min, parseInt(value) + step),
        direction: 'up'
      };
      setValue(state.value);

      if (onChange) {
        onChange(event, state);
      }

      if (_onClick) {
        _onClick(event, state);
      }
    },
    tabIndex: -1,
    title: incrementNumLabel || iconDescription,
    type: "button"
  }, _Add || (_Add = /*#__PURE__*/React__default["default"].createElement(iconsReact.Add, {
    className: "up-icon"
  }))), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--number__rule-divider")
  }))), isFluid && /*#__PURE__*/React__default["default"].createElement("hr", {
    className: "".concat(prefix, "--number-input__divider")
  }), normalizedProps.validation ? normalizedProps.validation : /*#__PURE__*/React__default["default"].createElement(HelperText, {
    disabled: disabled,
    description: helperText
  })));
});
NumberInput.propTypes = {
  /**
   * `true` to allow empty string.
   */
  allowEmpty: PropTypes__default["default"].bool,

  /**
   * Specify an optional className to be applied to the wrapper node
   */
  className: PropTypes__default["default"].string,

  /**
   * Optional starting value for uncontrolled state
   */
  defaultValue: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]),

  /**
   * Specify if the wheel functionality for the input should be disabled, or not
   */
  disableWheel: PropTypes__default["default"].bool,

  /**
   * Specify if the control should be disabled, or not
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes__default["default"].node,

  /**
   * Specify whether you want the underlying label to be visually hidden
   */
  hideLabel: PropTypes__default["default"].bool,

  /**
   * Specify whether you want the steppers to be hidden
   */
  hideSteppers: PropTypes__default["default"].bool,

  /**
   * Provide a description for up/down icons that can be read by screen readers
   */
  iconDescription: PropTypes__default["default"].string,

  /**
   * Specify a custom `id` for the input
   */
  id: PropTypes__default["default"].string.isRequired,

  /**
   * Specify if the currently value is invalid.
   */
  invalid: PropTypes__default["default"].bool,

  /**
   * Message which is displayed if the value is invalid.
   */
  invalidText: PropTypes__default["default"].node,

  /**
   * Generic `label` that will be used as the textual representation of what
   * this field is for
   */
  label: PropTypes__default["default"].node,

  /**
   * `true` to use the light version.
   */
  light: deprecate["default"](PropTypes__default["default"].bool, 'The `light` prop for `NumberInput` is no longer needed and has ' + 'been deprecated in v11 in favor of the new `Layer` component. It will be moved in the next major release.'),

  /**
   * The maximum value.
   */
  max: PropTypes__default["default"].number,

  /**
   * The minimum value.
   */
  min: PropTypes__default["default"].number,

  /**
   * Provide an optional handler that is called when the internal state of
   * NumberInput changes. This handler is called with event and state info.
   * `(event, { value, direction }) => void`
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Provide an optional function to be called when the up/down button is clicked
   */
  onClick: PropTypes__default["default"].func,

  /**
   * Provide an optional function to be called when a key is pressed in the number input
   */
  onKeyUp: PropTypes__default["default"].func,

  /**
   * Specify if the component should be read-only
   */
  readOnly: PropTypes__default["default"].bool,

  /**
   * Specify the size of the Number Input.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),

  /**
   * Specify how much the values should increase/decrease upon clicking on up/down button
   */
  step: PropTypes__default["default"].number,

  /**
   * Provide custom text for the component for each translation id
   */
  translateWithId: PropTypes__default["default"].func,

  /**
   * Specify the value of the input
   */
  value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]),

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes__default["default"].node
};

function Label(_ref2) {
  var _cx5;

  var disabled = _ref2.disabled,
      id = _ref2.id,
      hideLabel = _ref2.hideLabel,
      label = _ref2.label;
  var prefix = usePrefix.usePrefix();
  var className = cx__default["default"]((_cx5 = {}, _rollupPluginBabelHelpers.defineProperty(_cx5, "".concat(prefix, "--label"), true), _rollupPluginBabelHelpers.defineProperty(_cx5, "".concat(prefix, "--label--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_cx5, "".concat(prefix, "--visually-hidden"), hideLabel), _cx5));

  if (label) {
    return /*#__PURE__*/React__default["default"].createElement("label", {
      htmlFor: id,
      className: className
    }, label);
  }

  return null;
}

Label.propTypes = {
  disabled: PropTypes__default["default"].bool,
  hideLabel: PropTypes__default["default"].bool,
  id: PropTypes__default["default"].string,
  label: PropTypes__default["default"].node
};

function HelperText(_ref3) {
  var disabled = _ref3.disabled,
      description = _ref3.description;
  var prefix = usePrefix.usePrefix();
  var className = cx__default["default"]("".concat(prefix, "--form__helper-text"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--form__helper-text--disabled"), disabled));

  if (description) {
    return /*#__PURE__*/React__default["default"].createElement("div", {
      className: className
    }, description);
  }

  return null;
}

HelperText.propTypes = {
  description: PropTypes__default["default"].node,
  disabled: PropTypes__default["default"].bool
};
/**
 * Determine if the given value is invalid based on the given max, min and
 * conditions like `allowEmpty`. If `invalid` is passed through, it will default
 * to false.
 *
 * @param {object} config
 * @param {boolean} config.allowEmpty
 * @param {boolean} config.invalid
 * @param {number} config.value
 * @param {number} config.max
 * @param {number} config.min
 * @returns {boolean}
 */

function getInputValidity(_ref4) {
  var allowEmpty = _ref4.allowEmpty,
      invalid = _ref4.invalid,
      value = _ref4.value,
      max = _ref4.max,
      min = _ref4.min;

  if (invalid) {
    return false;
  }

  if (value === '') {
    return allowEmpty;
  }

  if (value > max || value < min) {
    return false;
  }

  return true;
}
/**
 * It prevents any wheel event from emitting.
 *
 * We want to prevent this input field from changing by the user accidentally
 * when the user scrolling up or down in a long form. So we prevent the default
 * behavior of wheel events when it is focused.
 *
 * Because React uses passive event handler by default, we can't just call
 * `preventDefault` in the `onWheel` event handler. So we have to get the input
 * ref and add our event handler manually.
 *
 * @see https://github.com/facebook/react/pull/19654
 * @param {WheelEvent} e A wheel event.
 */


function disableWheel(e) {
  e.preventDefault();
}
/**
 * Clamp the given value between the upper bound `max` and the lower bound `min`
 * @param {number} max
 * @param {number} min
 * @param {number} value
 */


function clamp(max, min, value) {
  return Math.min(max, Math.max(min, value));
}

exports.NumberInput = NumberInput;
exports.translationIds = translationIds;
