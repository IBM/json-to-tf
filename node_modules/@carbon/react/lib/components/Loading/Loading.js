/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
var deprecate = require('../../prop-types/deprecate.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["active", "className", "withOverlay", "small", "description"];

function Loading(_ref) {
  var _cx, _cx2;

  var _ref$active = _ref.active,
      active = _ref$active === void 0 ? true : _ref$active,
      customClassName = _ref.className,
      _ref$withOverlay = _ref.withOverlay,
      withOverlay = _ref$withOverlay === void 0 ? true : _ref$withOverlay,
      _ref$small = _ref.small,
      small = _ref$small === void 0 ? false : _ref$small,
      _ref$description = _ref.description,
      description = _ref$description === void 0 ? 'loading' : _ref$description,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();
  var loadingClassName = cx__default["default"](customClassName, (_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--loading"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--loading--small"), small), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--loading--stop"), !active), _cx));
  var overlayClassName = cx__default["default"]((_cx2 = {}, _rollupPluginBabelHelpers.defineProperty(_cx2, "".concat(prefix, "--loading-overlay"), true), _rollupPluginBabelHelpers.defineProperty(_cx2, "".concat(prefix, "--loading-overlay--stop"), !active), _cx2));
  var loading = /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({}, rest, {
    "aria-atomic": "true",
    "aria-live": active ? 'assertive' : 'off',
    className: loadingClassName
  }), /*#__PURE__*/React__default["default"].createElement("svg", {
    className: "".concat(prefix, "--loading__svg"),
    viewBox: "0 0 100 100"
  }, /*#__PURE__*/React__default["default"].createElement("title", null, description), small ? /*#__PURE__*/React__default["default"].createElement("circle", {
    className: "".concat(prefix, "--loading__background"),
    cx: "50%",
    cy: "50%",
    r: "44"
  }) : null, /*#__PURE__*/React__default["default"].createElement("circle", {
    className: "".concat(prefix, "--loading__stroke"),
    cx: "50%",
    cy: "50%",
    r: "44"
  })));
  return withOverlay ? /*#__PURE__*/React__default["default"].createElement("div", {
    className: overlayClassName
  }, loading) : loading;
}

Loading.propTypes = {
  /**
   * Specify whether you want the loading indicator to be spinning or not
   */
  active: PropTypes__default["default"].bool,

  /**
   * Provide an optional className to be applied to the containing node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify a description that would be used to best describe the loading state
   */
  description: PropTypes__default["default"].string,

  /**
   * Provide an `id` to uniquely identify the label
   */
  id: deprecate["default"](PropTypes__default["default"].string, "\nThe prop `id` is no longer needed."),

  /**
   * Specify whether you would like the small variant of <Loading>
   */
  small: PropTypes__default["default"].bool,

  /**
   * Specify whether you want the loader to be applied with an overlay
   */
  withOverlay: PropTypes__default["default"].bool
};

exports["default"] = Loading;
