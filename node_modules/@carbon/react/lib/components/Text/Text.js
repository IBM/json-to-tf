/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var TextDirectionContext = require('./TextDirectionContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["as", "children", "dir"];

function Text(_ref) {
  var as = _ref.as,
      children = _ref.children,
      _ref$dir = _ref.dir,
      dir = _ref$dir === void 0 ? 'auto' : _ref$dir,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  // TODO: Update with context typing once its been converted to TS
  var context = React.useContext(TextDirectionContext.TextDirectionContext);
  var textProps = {};
  var BaseComponent = as !== null && as !== void 0 ? as : 'span';

  var value = _rollupPluginBabelHelpers.objectSpread2({}, context);

  if (!context) {
    textProps.dir = dir;
    value.direction = dir;
  } else {
    var parentDirection = context.direction,
        getTextDirection = context.getTextDirection;

    if (getTextDirection && getTextDirection.current) {
      var text = getTextFromChildren(children);
      var override = getTextDirection.current(text);

      if (parentDirection !== override) {
        textProps.dir = override;
        value.direction = override;
      } else if (parentDirection === 'auto') {
        textProps.dir = override;
      }
    } else if (parentDirection !== dir) {
      textProps.dir = dir;
      value.direction = dir;
    } else if (parentDirection === 'auto') {
      textProps.dir = dir;
    }
  }

  return /*#__PURE__*/React__default["default"].createElement(TextDirectionContext.TextDirectionContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({}, rest, textProps), children));
}

Text.propTypes = {
  /**
   * Provide a custom element type used to render the outermost node
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].string, PropTypes__default["default"].elementType]),

  /**
   * Provide child elements or text to be rendered inside of this component
   */
  children: PropTypes__default["default"].node.isRequired,

  /**
   * Specify the text direction to be used for this component and any of its
   * children
   */
  dir: PropTypes__default["default"].oneOf(['ltr', 'rtl', 'auto'])
};

function getTextFromChildren(children) {
  var _React$Children$map;

  if (typeof children === 'string') {
    return children;
  }

  var text = (_React$Children$map = React__default["default"].Children.map(children, function (child) {
    if (typeof child === 'string') {
      return child;
    }

    return null;
  })) === null || _React$Children$map === void 0 ? void 0 : _React$Children$map.filter(function (text) {
    return text !== null;
  });

  if ((text === null || text === void 0 ? void 0 : text.length) === 1) {
    return text[0];
  }

  return text;
}

exports.Text = Text;
