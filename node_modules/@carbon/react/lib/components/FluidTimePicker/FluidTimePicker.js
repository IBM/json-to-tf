/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var FluidTextInput = require('../FluidTextInput/FluidTextInput.js');
var usePrefix = require('../../internal/usePrefix.js');
var iconsReact = require('@carbon/icons-react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["className", "children", "disabled", "invalid", "invalidText", "warn", "warnText"];
var FluidTimePicker = /*#__PURE__*/React__default["default"].forwardRef(function FluidTimePicker(_ref, ref) {
  var _classnames;

  var className = _ref.className,
      children = _ref.children,
      disabled = _ref.disabled,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      warn = _ref.warn,
      warnText = _ref.warnText,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();
  var classNames = cx__default["default"](className, (_classnames = {}, _rollupPluginBabelHelpers.defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid"), true), _rollupPluginBabelHelpers.defineProperty(_classnames, "".concat(prefix, "--time-picker--equal-width"), (children === null || children === void 0 ? void 0 : children.length) !== 2), _rollupPluginBabelHelpers.defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid--invalid"), invalid), _rollupPluginBabelHelpers.defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid--warning"), warn), _classnames));

  var errorText = function errorText() {
    if (invalid) {
      return invalidText;
    }

    if (warn) {
      return warnText;
    }
  };

  var error = invalid || warn;
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: classNames
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--time-picker--fluid__wrapper")
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--time-picker__input")
  }, /*#__PURE__*/React__default["default"].createElement(FluidTextInput["default"], _rollupPluginBabelHelpers["extends"]({
    disabled: disabled,
    ref: ref
  }, other))), disabled ? React__default["default"].Children.toArray(children).map(function (child) {
    return /*#__PURE__*/React__default["default"].cloneElement(child, {
      disabled: disabled
    });
  }) : children), error && /*#__PURE__*/React__default["default"].createElement("hr", {
    className: "".concat(prefix, "--time-picker__divider")
  }), error && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, errorText()), error && invalid ? /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
    className: "".concat(prefix, "--time-picker__icon ").concat(prefix, "--time-picker__icon--invalid")
  }) : /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
    className: "".concat(prefix, "--time-picker__icon ").concat(prefix, "--time-picker__icon--warn")
  }));
});
FluidTimePicker.propTypes = {
  /**
   * The child node(s)
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the outer FluidTimePicker wrapper
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the `<input>` should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify whether or not the control is invalid
   */
  invalid: PropTypes__default["default"].bool,

  /**
   * Provide the text that is displayed when the control is in error state
   */
  invalidText: PropTypes__default["default"].node,

  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes__default["default"].node.isRequired,

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes__default["default"].node
};
var FluidTimePicker$1 = FluidTimePicker;

exports["default"] = FluidTimePicker$1;
