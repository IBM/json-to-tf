/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var LayoutDirectionContext = require('./LayoutDirectionContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["as", "children", "dir"];

function LayoutDirection(_ref) {
  var _ref$as = _ref.as,
      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,
      children = _ref.children,
      dir = _ref.dir,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var value = React__default["default"].useMemo(function () {
    return {
      direction: dir
    };
  }, [dir]);
  return /*#__PURE__*/React__default["default"].createElement(LayoutDirectionContext.LayoutDirectionContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({
    dir: dir
  }, rest), children));
}

LayoutDirection.propTypes = {
  /**
   * Customize the element type used to render the outermost node
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].string, PropTypes__default["default"].elementType]),

  /**
   * Provide child elements or components to be rendered inside of this
   * component
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify the layout direction of this part of the page
   */
  dir: PropTypes__default["default"].oneOf(['ltr', 'rtl']).isRequired
};

exports.LayoutDirectionContext = LayoutDirectionContext.LayoutDirectionContext;
exports.LayoutDirection = LayoutDirection;
