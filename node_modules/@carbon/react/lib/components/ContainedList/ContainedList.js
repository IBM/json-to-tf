/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var useId = require('../../internal/useId.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var variants = ['on-page', 'disclosed'];

function ContainedList(_ref) {
  var action = _ref.action,
      children = _ref.children,
      className = _ref.className,
      isInset = _ref.isInset,
      _ref$kind = _ref.kind,
      kind = _ref$kind === void 0 ? variants[0] : _ref$kind,
      label = _ref.label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'lg' : _ref$size;
  var labelId = "".concat(useId.useId('contained-list'), "-header");
  var prefix = usePrefix.usePrefix();
  var classes = cx__default["default"]("".concat(prefix, "--contained-list"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--contained-list--inset-rulers"), isInset), "".concat(prefix, "--contained-list--").concat(kind), "".concat(prefix, "--contained-list--").concat(size), className);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: classes
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--contained-list__header")
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    id: labelId,
    className: "".concat(prefix, "--contained-list__label")
  }, label), action && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--contained-list__action")
  }, action)), /*#__PURE__*/React__default["default"].createElement("ul", {
    "aria-labelledby": labelId
  }, children));
}

ContainedList.propTypes = {
  /**
   * A slot for a possible interactive element to render.
   */
  action: PropTypes__default["default"].node,

  /**
   * A collection of ContainedListItems to be rendered in the ContainedList
   */
  children: PropTypes__default["default"].node,

  /**
   * Additional CSS class names.
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the dividing lines in between list items should be inset.
   */
  isInset: PropTypes__default["default"].bool,

  /**
   * The kind of ContainedList you want to display
   */
  kind: PropTypes__default["default"].oneOf(variants),

  /**
   * A label describing the contained list.
   */
  label: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].node]).isRequired,

  /**
   * Specify the size of the contained list.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl'])
};

exports["default"] = ContainedList;
