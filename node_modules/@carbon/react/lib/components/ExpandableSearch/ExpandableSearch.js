/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var cx = require('classnames');
var Search = require('../Search/Search.js');
var usePrefix = require('../../internal/usePrefix.js');
var events = require('../../tools/events.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["onBlur", "onChange", "onExpand", "onFocus"];

function ExpandableSearch(_ref) {
  var onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onExpand = _ref.onExpand,
      onFocus = _ref.onFocus,
      props = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var _useState = React.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      hasContent = _useState4[0],
      setHasContent = _useState4[1];

  var searchRef = React.useRef(null);
  var prefix = usePrefix.usePrefix();

  function handleFocus() {
    if (!expanded) {
      setExpanded(true);
    }
  }

  function handleBlur(evt) {
    var relatedTargetIsAllowed = evt.relatedTarget && evt.relatedTarget.classList.contains("".concat(prefix, "--search-close"));

    if (expanded && !relatedTargetIsAllowed && !hasContent) {
      setExpanded(false);
    }
  }

  function handleChange(evt) {
    setHasContent(evt.target.value !== '');
  }

  function handleExpand() {
    var _searchRef$current$fo, _searchRef$current;

    (_searchRef$current$fo = (_searchRef$current = searchRef.current).focus) === null || _searchRef$current$fo === void 0 ? void 0 : _searchRef$current$fo.call(_searchRef$current);
  }

  var classes = cx__default["default"]("".concat(prefix, "--search--expandable"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--search--expanded"), expanded), props.className);
  return /*#__PURE__*/React__default["default"].createElement(Search["default"], _rollupPluginBabelHelpers["extends"]({}, props, {
    ref: searchRef,
    className: classes,
    onFocus: events.composeEventHandlers([onFocus, handleFocus]),
    onBlur: events.composeEventHandlers([onBlur, handleBlur]),
    onChange: events.composeEventHandlers([onChange, handleChange]),
    onExpand: events.composeEventHandlers([onExpand, handleExpand])
  }));
}

ExpandableSearch.propTypes = Search["default"].propTypes;

exports["default"] = ExpandableSearch;
