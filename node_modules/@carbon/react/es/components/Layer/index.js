/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { usePrefix } from '../../internal/usePrefix.js';
import { LayerContext } from './LayerContext.js';

var _excluded = ["as", "className", "children", "level"];
var levels = ['one', 'two', 'three'];
var MAX_LEVEL = levels.length - 1;
/**
 * A custom hook that will return information about the current layer. A common
 * field to pull from this is the `level` for the layer that the component that
 * calls this hook is currently in
 */

function useLayer() {
  var level = React__default.useContext(LayerContext);
  return {
    level: level
  };
}
function Layer(_ref) {
  var _ref$as = _ref.as,
      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,
      customClassName = _ref.className,
      children = _ref.children,
      overrideLevel = _ref.level,
      rest = _objectWithoutProperties(_ref, _excluded);

  var contextLevel = React__default.useContext(LayerContext);
  var level = overrideLevel !== null && overrideLevel !== void 0 ? overrideLevel : contextLevel;
  var prefix = usePrefix();
  var className = cx("".concat(prefix, "--layer-").concat(levels[level]), customClassName); // The level should be between 0 and MAX_LEVEL

  var value = Math.max(0, Math.min(level + 1, MAX_LEVEL));
  return /*#__PURE__*/React__default.createElement(LayerContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default.createElement(BaseComponent, _extends({}, rest, {
    className: className
  }), children));
}
Layer.propTypes = {
  /**
   * Specify a custom component or element to be rendered as the top-level
   * element in the component
   */
  as: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.elementType]),

  /**
   * Provide child elements to be rendered inside of `Theme`
   */
  children: PropTypes.node,

  /**
   * Provide a custom class name to be used on the outermost element rendered by
   * the component
   */
  className: PropTypes.string,

  /**
   * Specify the layer level and override any existing levels based on hierarchy
   */
  level: PropTypes.oneOf([0, 1, 2])
};

export { Layer, useLayer };
