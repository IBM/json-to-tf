/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, typeof as _typeof, objectSpread2 as _objectSpread2, extends as _extends, toConsumableArray as _toConsumableArray } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { useContext, useState, useCallback, useRef, useEffect, useImperativeHandle } from 'react';
import cx from 'classnames';
import flatpickr from 'flatpickr';
import l10n from 'flatpickr/dist/l10n/index';
import DatePickerInput from '../DatePickerInput/DatePickerInput.js';
import carbonFlatpickrAppendToPlugin from './plugins/appendToPlugin.js';
import carbonFlatpickrFixEventsPlugin from './plugins/fixEventsPlugin.js';
import carbonFlatpickrRangePlugin from './plugins/rangePlugin.js';
import deprecate from '../../prop-types/deprecate.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { useSavedCallback } from '../../internal/useSavedCallback.js';
import '../FluidForm/FluidForm.js';
import { FormContext } from '../FluidForm/FormContext.js';
import { WarningFilled, WarningAltFilled } from '@carbon/icons-react';
import { match } from '../../internal/keyboard/match.js';
import { Escape, ArrowDown } from '../../internal/keyboard/keys.js';

var _excluded = ["allowInput", "appendTo", "children", "className", "closeOnSelect", "dateFormat", "datePickerType", "disable", "enable", "inline", "invalid", "invalidText", "warn", "warnText", "light", "locale", "maxDate", "minDate", "onChange", "onClose", "onOpen", "readOnly", "short", "value"];

l10n.en.weekdays.shorthand.forEach(function (_day, index) {
  var currentDay = l10n.en.weekdays.shorthand;

  if (currentDay[index] === 'Thu' || currentDay[index] === 'Th') {
    currentDay[index] = 'Th';
  } else {
    currentDay[index] = currentDay[index].charAt(0);
  }
});
var forEach = Array.prototype.forEach;
/**
 * @param {number} monthNumber The month number.
 * @param {boolean} shorthand `true` to use shorthand month.
 * @param {Locale} locale The Flatpickr locale data.
 * @returns {string} The month string.
 */

var monthToStr = function monthToStr(monthNumber, shorthand, locale) {
  return locale.months[shorthand ? 'shorthand' : 'longhand'][monthNumber];
};
/**
 * @param {object} config Plugin configuration.
 * @param {boolean} [config.shorthand] `true` to use shorthand month.
 * @param {string} config.selectorFlatpickrMonthYearContainer The CSS selector for the container of month/year selection UI.
 * @param {string} config.selectorFlatpickrYearContainer The CSS selector for the container of year selection UI.
 * @param {string} config.selectorFlatpickrCurrentMonth The CSS selector for the text-based month selection UI.
 * @param {string} config.classFlatpickrCurrentMonth The CSS class for the text-based month selection UI.
 * @returns {Plugin} A Flatpickr plugin to use text instead of `<select>` for month picker.
 */


var carbonFlatpickrMonthSelectPlugin = function carbonFlatpickrMonthSelectPlugin(config) {
  return function (fp) {
    var setupElements = function setupElements() {
      var _fp$monthElements;

      if (!fp.monthElements) {
        return;
      }

      fp.monthElements.forEach(function (elem) {
        if (!elem.parentNode) {
          return;
        }

        elem.parentNode.removeChild(elem);
      });

      (_fp$monthElements = fp.monthElements).splice.apply(_fp$monthElements, [0, fp.monthElements.length].concat(_toConsumableArray(fp.monthElements.map(function () {
        // eslint-disable-next-line no-underscore-dangle
        var monthElement = fp._createElement('span', config.classFlatpickrCurrentMonth);

        monthElement.textContent = monthToStr(fp.currentMonth, config.shorthand === true, fp.l10n);
        fp.yearElements[0].closest(config.selectorFlatpickrMonthYearContainer).insertBefore(monthElement, fp.yearElements[0].closest(config.selectorFlatpickrYearContainer));
        return monthElement;
      }))));
    };

    var updateCurrentMonth = function updateCurrentMonth() {
      if (fp.monthElements) {
        var monthStr = monthToStr(fp.currentMonth, config.shorthand === true, fp.l10n);
        fp.yearElements.forEach(function (elem) {
          var currentMonthContainer = elem.closest(config.selectorFlatpickrMonthYearContainer);
          Array.prototype.forEach.call(currentMonthContainer.querySelectorAll('.cur-month'), function (monthElement) {
            monthElement.textContent = monthStr;
          });
        });
      }
    };

    var register = function register() {
      fp.loadedPlugins.push('carbonFlatpickrMonthSelectPlugin');
    };

    return {
      onMonthChange: updateCurrentMonth,
      onValueUpdate: updateCurrentMonth,
      onOpen: updateCurrentMonth,
      onReady: [setupElements, updateCurrentMonth, register]
    };
  };
};
/**
 * Determine if every child in a list of children has no label specified
 * @param {Array<ReactElement>} children
 * @returns {boolean}
 */


function isLabelTextEmpty(children) {
  return children.every(function (child) {
    return !child.props.labelText;
  });
}

var rightArrowHTML = "<svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\">\n  <polygon points=\"11,8 6,13 5.3,12.3 9.6,8 5.3,3.7 6,3 \"/>\n</svg>";
var leftArrowHTML = "<svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\">\n  <polygon points=\"5,8 10,3 10.7,3.7 6.4,8 10.7,12.3 10,13 \"/>\n</svg>";

function updateClassNames(calendar, prefix) {
  var calendarContainer = calendar.calendarContainer;
  var daysContainer = calendar.days;

  if (calendarContainer && daysContainer) {
    // calendarContainer and daysContainer are undefined if flatpickr detects a mobile device
    calendarContainer.classList.add("".concat(prefix, "--date-picker__calendar"));
    calendarContainer.querySelector('.flatpickr-month').classList.add("".concat(prefix, "--date-picker__month"));
    calendarContainer.querySelector('.flatpickr-weekdays').classList.add("".concat(prefix, "--date-picker__weekdays"));
    calendarContainer.querySelector('.flatpickr-days').classList.add("".concat(prefix, "--date-picker__days"));
    forEach.call(calendarContainer.querySelectorAll('.flatpickr-weekday'), function (item) {
      var currentItem = item;
      currentItem.innerHTML = currentItem.innerHTML.replace(/\s+/g, '');
      currentItem.classList.add("".concat(prefix, "--date-picker__weekday"));
    });
    forEach.call(daysContainer.querySelectorAll('.flatpickr-day'), function (item) {
      item.classList.add("".concat(prefix, "--date-picker__day"));

      if (item.classList.contains('today') && calendar.selectedDates.length > 0) {
        item.classList.add('no-border');
      } else if (item.classList.contains('today') && calendar.selectedDates.length === 0) {
        item.classList.remove('no-border');
      }
    });
  }
}

var DatePicker = /*#__PURE__*/React__default.forwardRef(function DatePicker(_ref, ref) {
  var _cx;

  var allowInput = _ref.allowInput,
      appendTo = _ref.appendTo,
      children = _ref.children,
      className = _ref.className,
      _ref$closeOnSelect = _ref.closeOnSelect,
      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,
      _ref$dateFormat = _ref.dateFormat,
      dateFormat = _ref$dateFormat === void 0 ? 'm/d/Y' : _ref$dateFormat,
      datePickerType = _ref.datePickerType,
      disable = _ref.disable,
      enable = _ref.enable,
      inline = _ref.inline,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      warn = _ref.warn,
      warnText = _ref.warnText,
      _ref$light = _ref.light,
      light = _ref$light === void 0 ? false : _ref$light,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? 'en' : _ref$locale,
      maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      onChange = _ref.onChange,
      onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      _ref$readOnly = _ref.readOnly,
      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
      _ref$short = _ref.short,
      short = _ref$short === void 0 ? false : _ref$short,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();

  var _useContext = useContext(FormContext),
      isFluid = _useContext.isFluid;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasInput = _useState2[0],
      setHasInput = _useState2[1];

  var startInputField = useCallback(function (node) {
    if (node !== null) {
      startInputField.current = node;
      setHasInput(true);
    }
  }, []);
  var endInputField = useRef(null);
  var calendarRef = useRef(null);
  var savedOnChange = useSavedCallback(onChange);
  var savedOnClose = useSavedCallback(onClose);
  var savedOnOpen = useSavedCallback(onOpen);
  var datePickerClasses = cx("".concat(prefix, "--date-picker"), (_cx = {}, _defineProperty(_cx, "".concat(prefix, "--date-picker--short"), short), _defineProperty(_cx, "".concat(prefix, "--date-picker--light"), light), _defineProperty(_cx, "".concat(prefix, "--date-picker--simple"), datePickerType === 'simple'), _defineProperty(_cx, "".concat(prefix, "--date-picker--single"), datePickerType === 'single'), _defineProperty(_cx, "".concat(prefix, "--date-picker--range"), datePickerType === 'range'), _defineProperty(_cx, "".concat(prefix, "--date-picker--nolabel"), datePickerType === 'range' && isLabelTextEmpty(children)), _cx));
  var wrapperClasses = cx("".concat(prefix, "--form-item"), _defineProperty({}, className, className));
  var childrenWithProps = React__default.Children.toArray(children).map(function (child, index) {
    if (index === 0 && child.type === React__default.createElement(DatePickerInput, child.props).type) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        datePickerType: datePickerType,
        ref: startInputField,
        readOnly: readOnly
      });
    }

    if (index === 1 && child.type === React__default.createElement(DatePickerInput, child.props).type) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        datePickerType: datePickerType,
        ref: endInputField,
        readOnly: readOnly
      });
    }

    if (index === 0) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        ref: startInputField,
        readOnly: readOnly
      });
    }

    if (index === 1) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        ref: endInputField,
        readOnly: readOnly
      });
    }
  });
  useEffect(function () {
    var _flatpickr;

    if (datePickerType !== 'single' && datePickerType !== 'range') {
      return;
    }

    if (!startInputField.current) {
      return;
    }

    var onHook = function onHook(_electedDates, _dateStr, instance, prefix) {
      updateClassNames(instance, prefix);

      if (startInputField !== null && startInputField !== void 0 && startInputField.current) {
        startInputField.current.readOnly = readOnly;
      }

      if (endInputField !== null && endInputField !== void 0 && endInputField.current) {
        endInputField.current.readOnly = readOnly;
      }
    }; // Logic to determine if `enable` or `disable` will be passed down. If neither
    // is provided, we return the default empty disabled array, allowing all dates.


    var enableOrDisable = enable ? 'enable' : 'disable';
    var enableOrDisableArr;

    if (!enable && !disable) {
      enableOrDisableArr = [];
    } else if (enable) {
      enableOrDisableArr = enable;
    } else {
      enableOrDisableArr = disable;
    }

    var localeData;

    if (_typeof(locale) === 'object') {
      var location = locale.locale ? locale.locale : 'en';
      localeData = _objectSpread2(_objectSpread2({}, l10n[location]), locale);
    } else {
      localeData = l10n[locale];
    }

    var start = startInputField.current;
    var end = endInputField.current;
    var calendar = new flatpickr(start, (_flatpickr = {
      inline: inline !== null && inline !== void 0 ? inline : false,
      disableMobile: true,
      defaultDate: value,
      closeOnSelect: closeOnSelect,
      mode: datePickerType,
      allowInput: allowInput !== null && allowInput !== void 0 ? allowInput : true,
      dateFormat: dateFormat,
      locale: localeData
    }, _defineProperty(_flatpickr, enableOrDisable, enableOrDisableArr), _defineProperty(_flatpickr, "minDate", minDate), _defineProperty(_flatpickr, "maxDate", maxDate), _defineProperty(_flatpickr, "plugins", [datePickerType === 'range' ? new carbonFlatpickrRangePlugin({
      input: endInputField.current
    }) : function () {}, appendTo ? carbonFlatpickrAppendToPlugin({
      appendTo: appendTo
    }) : function () {}, carbonFlatpickrMonthSelectPlugin({
      selectorFlatpickrMonthYearContainer: '.flatpickr-current-month',
      selectorFlatpickrYearContainer: '.numInputWrapper',
      selectorFlatpickrCurrentMonth: '.cur-month',
      classFlatpickrCurrentMonth: 'cur-month'
    }), carbonFlatpickrFixEventsPlugin({
      inputFrom: startInputField.current,
      inputTo: endInputField.current
    })]), _defineProperty(_flatpickr, "clickOpens", !readOnly), _defineProperty(_flatpickr, "noCalendar", readOnly), _defineProperty(_flatpickr, "nextArrow", rightArrowHTML), _defineProperty(_flatpickr, "prevArrow", leftArrowHTML), _defineProperty(_flatpickr, "onChange", function onChange() {
      if (savedOnChange && !readOnly) {
        savedOnChange.apply(void 0, arguments);
      }
    }), _defineProperty(_flatpickr, "onClose", savedOnClose), _defineProperty(_flatpickr, "onReady", onHook), _defineProperty(_flatpickr, "onMonthChange", onHook), _defineProperty(_flatpickr, "onYearChange", onHook), _defineProperty(_flatpickr, "onOpen", function onOpen() {
      onHook.apply(void 0, arguments);
      savedOnOpen.apply(void 0, arguments);
    }), _defineProperty(_flatpickr, "onValueUpdate", onHook), _flatpickr));
    calendarRef.current = calendar;

    function handleArrowDown(event) {
      if (match(event, Escape)) {
        calendar.calendarContainer.classList.remove('open');
      }

      if (match(event, ArrowDown)) {
        var calendarContainer = calendar.calendarContainer,
            fpSelectedDateElem = calendar.selectedDateElem,
            fptodayDateElem = calendar.todayDateElem;
        var selectedDateElem = calendarContainer.querySelector('.selected') && fpSelectedDateElem;
        var todayDateElem = calendarContainer.querySelector('.today') && fptodayDateElem;
        (selectedDateElem || todayDateElem || calendarContainer.querySelector('.flatpickr-day[tabindex]') || calendarContainer).focus();
      }
    }

    function handleOnChange() {
      if (datePickerType == 'single') {
        calendar.calendarContainer.classList.remove('open');
      }

      if (start.value !== '') {
        return;
      }

      if (!calendar.selectedDates) {
        return;
      }

      if (calendar.selectedDates.length === 0) {
        return;
      }

      calendar.clear();
      calendar.input.focus();
    }

    if (start) {
      start.addEventListener('keydown', handleArrowDown);
      start.addEventListener('change', handleOnChange);

      if (calendar && calendar.calendarContainer) {
        // Flatpickr's calendar dialog is not rendered in a landmark causing an
        // error with IBM Equal Access Accessibility Checker so we add an aria
        // role to the container div.
        calendar.calendarContainer.setAttribute('role', 'application'); // IBM EAAC requires an aria-label on a role='region'

        calendar.calendarContainer.setAttribute('aria-label', 'calendar-container');
      }
    }

    if (end) {
      end.addEventListener('keydown', handleArrowDown);
      end.addEventListener('change', handleOnChange);
    } //component did unmount equivalent


    return function () {
      // Note: if the `startInputField` ref is undefined then calendar will be
      // of type: Array and `destroy` will not be defined
      if (calendar && calendar.destroy) {
        calendar.destroy();
      } // prevent a duplicate date selection when a default value is set


      if (value) {
        if (startInputField !== null && startInputField !== void 0 && startInputField.current) {
          startInputField.current.value = '';
        }

        if (endInputField !== null && endInputField !== void 0 && endInputField.current) {
          // eslint-disable-next-line react-hooks/exhaustive-deps
          endInputField.current.value = '';
        }
      }

      if (start) {
        start.removeEventListener('keydown', handleArrowDown);
        start.removeEventListener('change', handleOnChange);
      }

      if (end) {
        end.removeEventListener('keydown', handleArrowDown);
        end.removeEventListener('change', handleOnChange);
      }
    };
  }, [savedOnChange, savedOnClose, savedOnOpen, readOnly, hasInput]); //eslint-disable-line react-hooks/exhaustive-deps
  // this hook allows consumers to access the flatpickr calendar
  // instance for cases where functions like open() or close()
  // need to be imperatively called on the calendar

  useImperativeHandle(ref, function () {
    return {
      get calendar() {
        return calendarRef.current;
      }

    };
  });
  useEffect(function () {
    var _calendarRef$current;

    if (calendarRef !== null && calendarRef !== void 0 && (_calendarRef$current = calendarRef.current) !== null && _calendarRef$current !== void 0 && _calendarRef$current.set) {
      calendarRef.current.set({
        dateFormat: dateFormat
      });
    }
  }, [dateFormat]);
  useEffect(function () {
    var _calendarRef$current2;

    if (calendarRef !== null && calendarRef !== void 0 && (_calendarRef$current2 = calendarRef.current) !== null && _calendarRef$current2 !== void 0 && _calendarRef$current2.set) {
      calendarRef.current.set('minDate', minDate);
    }
  }, [minDate]);
  useEffect(function () {
    var _calendarRef$current3;

    if (calendarRef !== null && calendarRef !== void 0 && (_calendarRef$current3 = calendarRef.current) !== null && _calendarRef$current3 !== void 0 && _calendarRef$current3.set) {
      calendarRef.current.set('maxDate', maxDate);
    }
  }, [maxDate]);
  useEffect(function () {
    var _calendarRef$current4;

    if (calendarRef !== null && calendarRef !== void 0 && (_calendarRef$current4 = calendarRef.current) !== null && _calendarRef$current4 !== void 0 && _calendarRef$current4.set && disable) {
      calendarRef.current.set('disable', disable);
    }
  }, [disable]);
  useEffect(function () {
    var _calendarRef$current5;

    if (calendarRef !== null && calendarRef !== void 0 && (_calendarRef$current5 = calendarRef.current) !== null && _calendarRef$current5 !== void 0 && _calendarRef$current5.set && enable) {
      calendarRef.current.set('enable', enable);
    }
  }, [enable]);
  useEffect(function () {
    var _calendarRef$current6;

    if (calendarRef !== null && calendarRef !== void 0 && (_calendarRef$current6 = calendarRef.current) !== null && _calendarRef$current6 !== void 0 && _calendarRef$current6.set && inline) {
      calendarRef.current.set('inline', inline);
    }
  }, [inline]);
  useEffect(function () {
    var _calendarRef$current7;

    if (calendarRef !== null && calendarRef !== void 0 && (_calendarRef$current7 = calendarRef.current) !== null && _calendarRef$current7 !== void 0 && _calendarRef$current7.set) {
      if (value !== undefined) {
        calendarRef.current.setDate(value);
      }

      updateClassNames(calendarRef.current, prefix); //for simple date picker w/o calendar; initial mount may not have value
    } else if (!calendarRef.current && value) {
      startInputField.current.value = value;
    }
  }, [value, prefix]); //eslint-disable-line react-hooks/exhaustive-deps

  var fluidError;

  if (isFluid) {
    if (invalid) {
      fluidError = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningFilled, {
        className: "".concat(prefix, "--date-picker__icon ").concat(prefix, "--date-picker__icon--invalid")
      }), /*#__PURE__*/React__default.createElement("hr", {
        className: "".concat(prefix, "--date-picker__divider")
      }), /*#__PURE__*/React__default.createElement("div", {
        className: "".concat(prefix, "--form-requirement")
      }, invalidText));
    }

    if (warn && !invalid) {
      fluidError = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningAltFilled, {
        className: "".concat(prefix, "--date-picker__icon ").concat(prefix, "--date-picker__icon--warn")
      }), /*#__PURE__*/React__default.createElement("hr", {
        className: "".concat(prefix, "--date-picker__divider")
      }), /*#__PURE__*/React__default.createElement("div", {
        className: "".concat(prefix, "--form-requirement")
      }, warnText));
    }
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: wrapperClasses,
    ref: ref
  }, rest), /*#__PURE__*/React__default.createElement("div", {
    className: datePickerClasses
  }, childrenWithProps), fluidError);
});
DatePicker.propTypes = {
  /**
   * flatpickr prop passthrough. Allows the user to enter a date directly
   * into the input field
   */
  allowInput: PropTypes.bool,

  /**
   * The DOM element the Flatpicker should be inserted into. `<body>` by default.
   */
  appendTo: PropTypes.object,

  /**
   * The child nodes.
   */
  children: PropTypes.node,

  /**
   * The CSS class names.
   */
  className: PropTypes.string,

  /**
   * flatpickr prop passthrough. Controls whether the calendar dropdown closes upon selection.
   */
  closeOnSelect: PropTypes.bool,

  /**
   * The date format.
   */
  dateFormat: PropTypes.string,

  /**
   * The type of the date picker:
   *
   * * `simple` - Without calendar dropdown.
   * * `single` - With calendar dropdown and single date.
   * * `range` - With calendar dropdown and a date range.
   */
  datePickerType: PropTypes.oneOf(['simple', 'single', 'range']),

  /**
   * The flatpickr `disable` option that allows a user to disable certain dates.
   */
  disable: PropTypes.array,

  /**
   * The flatpickr `enable` option that allows a user to enable certain dates.
   */
  enable: PropTypes.array,

  /**
   * The flatpickr `inline` option.
   */
  inline: PropTypes.bool,

  /**
   * Specify whether or not the control is invalid (Fluid only)
   */
  invalid: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in error state (Fluid Only)
   */
  invalidText: PropTypes.node,

  /**
   * `true` to use the light version.
   */
  light: deprecate(PropTypes.bool, 'The `light` prop for `DatePicker` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),

  /**
   *  The language locale used to format the days of the week, months, and numbers. The full list of supported locales can be found here https://github.com/flatpickr/flatpickr/tree/master/src/l10n
   */
  locale: PropTypes.oneOfType([PropTypes.object, PropTypes.oneOf(['ar', // Arabic
  'at', // Austria
  'az', // Azerbaijan
  'be', // Belarusian
  'bg', // Bulgarian
  'bn', // Bangla
  'bs', // Bosnia
  'cat', // Catalan
  'cs', // Czech
  'cy', // Welsh
  'da', // Danish
  'de', // German
  'en', // English
  'eo', // Esperanto
  'es', // Spanish
  'et', // Estonian
  'fa', // Persian
  'fi', // Finnish
  'fo', // Faroese
  'fr', // French
  'ga', // Gaelic
  'gr', // Greek
  'he', // Hebrew
  'hi', // Hindi
  'hr', // Croatian
  'hu', // Hungarian
  'id', // Indonesian
  'is', // Icelandic
  'it', // Italian
  'ja', // Japanese
  'ka', // Georgian
  'km', // Khmer
  'ko', // Korean
  'kz', // Kazakh
  'lt', // Lithuanian
  'lv', // Latvian
  'mk', // Macedonian
  'mn', // Mongolian
  'ms', // Malaysian
  'my', // Burmese
  'nl', // Dutch
  'no', // Norwegian
  'pa', // Punjabi
  'pl', // Polish
  'pt', // Portuguese
  'ro', // Romanian
  'ru', // Russian
  'si', // Sinhala
  'sk', // Slovak
  'sl', // Slovenian
  'sq', // Albanian
  'sr', // Serbian
  'sv', // Swedish
  'th', // Thai
  'tr', // Turkish
  'uk', // Ukrainian
  'uz', // Uzbek
  'uz_latn', // Uzbek Latin
  'vn', // Vietnamese
  'zh_tw', // Mandarin Traditional
  'zh' // Mandarin
  ])]),

  /**
   * The maximum date that a user can pick to.
   */
  maxDate: PropTypes.string,

  /**
   * The minimum date that a user can start picking from.
   */
  minDate: PropTypes.string,

  /**
   * The `change` event handler.
   */
  onChange: PropTypes.func,

  /**
   * The `close` event handler.
   */
  onClose: PropTypes.func,

  /**
   * The `open` event handler.
   */
  onOpen: PropTypes.func,

  /**
   * whether the DatePicker is to be readOnly
   * if boolean applies to all inputs
   * if array applies to each input in order
   */
  readOnly: PropTypes.oneOfType([PropTypes.bool, PropTypes.array]),

  /**
   * `true` to use the short version.
   */
  short: PropTypes.bool,

  /**
   * The value of the date value provided to flatpickr, could
   * be a date, a date number, a date string, an array of dates.
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object])), PropTypes.object, PropTypes.number]),

  /**
   * Specify whether the control is currently in warning state (Fluid only)
   */
  warn: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in warning state (Fluid only)
   */
  warnText: PropTypes.node
};
var DatePicker$1 = DatePicker;

export { DatePicker$1 as default };
