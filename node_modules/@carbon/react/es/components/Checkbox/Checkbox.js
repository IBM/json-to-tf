/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default from 'react';
import cx from 'classnames';
import '../Text/index.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { Text } from '../Text/Text.js';

var _excluded = ["className", "id", "labelText", "onChange", "onClick", "indeterminate", "hideLabel", "readOnly", "title"];
var Checkbox = /*#__PURE__*/React__default.forwardRef(function (_ref, _ref2) {
  var className = _ref.className,
      id = _ref.id,
      labelText = _ref.labelText,
      _onChange = _ref.onChange,
      _onClick = _ref.onClick,
      indeterminate = _ref.indeterminate,
      hideLabel = _ref.hideLabel,
      readOnly = _ref.readOnly,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? '' : _ref$title,
      other = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var wrapperClasses = cx("".concat(prefix, "--form-item"), "".concat(prefix, "--checkbox-wrapper"), className, _defineProperty({}, "".concat(prefix, "--checkbox-wrapper--readonly"), readOnly));
  var innerLabelClasses = cx("".concat(prefix, "--checkbox-label-text"), _defineProperty({}, "".concat(prefix, "--visually-hidden"), hideLabel));
  return /*#__PURE__*/React__default.createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/React__default.createElement("input", _extends({}, other, {
    type: "checkbox",
    onChange: function onChange(evt) {
      if (!readOnly && _onChange) {
        _onChange(evt, {
          checked: evt.target.checked,
          id: id
        });
      }
    },
    className: "".concat(prefix, "--checkbox"),
    id: id,
    ref: function ref(el) {
      if (el && indeterminate) {
        el.indeterminate = indeterminate;
      }

      if (typeof _ref2 === 'function') {
        _ref2(el);
      } else if (_ref2 && Object(_ref2) === _ref2) {
        _ref2.current = el;
      }
    } // readonly attribute not applicable to type="checkbox"
    // see - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox
    ,
    "aria-readonly": readOnly,
    onClick: function onClick(evt) {
      if (readOnly) {
        // prevent default stops the checkbox being updated
        evt.preventDefault();
      } // pass onClick event on to the user even if readonly


      if (_onClick) {
        _onClick(evt);
      }
    }
  })), /*#__PURE__*/React__default.createElement("label", {
    htmlFor: id,
    className: "".concat(prefix, "--checkbox-label"),
    title: title
  }, /*#__PURE__*/React__default.createElement(Text, {
    className: innerLabelClasses
  }, labelText)));
});
Checkbox.propTypes = {
  /**
   * Specify whether the underlying input should be checked
   */
  checked: PropTypes.bool,

  /**
   * Specify an optional className to be applied to the <label> node
   */
  className: PropTypes.string,

  /**
   * Specify whether the underlying input should be checked by default
   */
  defaultChecked: PropTypes.bool,

  /**
   * Specify whether the Checkbox should be disabled
   */
  disabled: PropTypes.bool,

  /**
   * Specify whether the label should be hidden, or not
   */
  hideLabel: PropTypes.bool,

  /**
   * Provide an `id` to uniquely identify the Checkbox input
   */
  id: PropTypes.string.isRequired,

  /**
   * Specify whether the Checkbox is in an indeterminate state
   */
  indeterminate: PropTypes.bool,

  /**
   * Provide a label to provide a description of the Checkbox input that you are
   * exposing to the user
   */
  labelText: PropTypes.node.isRequired,

  /**
   * Provide an optional handler that is called when the internal state of
   * Checkbox changes. This handler is called with event and state info.
   * `(event, { checked, id }) => void`
   */
  onChange: PropTypes.func,

  /**
   * Specify whether the Checkbox is read-only
   */
  readOnly: PropTypes.bool,

  /**
   * Specify a title for the <label> node for the Checkbox
   */
  title: PropTypes.string
};
Checkbox.defaultProps = {
  onChange: function onChange() {},
  indeterminate: false
};
Checkbox.displayName = 'Checkbox';

export { Checkbox as default };
