/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useState, useRef } from 'react';
import cx from 'classnames';
import Search from '../Search/Search.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { composeEventHandlers } from '../../tools/events.js';

var _excluded = ["onBlur", "onChange", "onExpand", "onFocus"];

function ExpandableSearch(_ref) {
  var onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onExpand = _ref.onExpand,
      onFocus = _ref.onFocus,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hasContent = _useState4[0],
      setHasContent = _useState4[1];

  var searchRef = useRef(null);
  var prefix = usePrefix();

  function handleFocus() {
    if (!expanded) {
      setExpanded(true);
    }
  }

  function handleBlur(evt) {
    var relatedTargetIsAllowed = evt.relatedTarget && evt.relatedTarget.classList.contains("".concat(prefix, "--search-close"));

    if (expanded && !relatedTargetIsAllowed && !hasContent) {
      setExpanded(false);
    }
  }

  function handleChange(evt) {
    setHasContent(evt.target.value !== '');
  }

  function handleExpand() {
    var _searchRef$current$fo, _searchRef$current;

    (_searchRef$current$fo = (_searchRef$current = searchRef.current).focus) === null || _searchRef$current$fo === void 0 ? void 0 : _searchRef$current$fo.call(_searchRef$current);
  }

  var classes = cx("".concat(prefix, "--search--expandable"), _defineProperty({}, "".concat(prefix, "--search--expanded"), expanded), props.className);
  return /*#__PURE__*/React__default.createElement(Search, _extends({}, props, {
    ref: searchRef,
    className: classes,
    onFocus: composeEventHandlers([onFocus, handleFocus]),
    onBlur: composeEventHandlers([onBlur, handleBlur]),
    onChange: composeEventHandlers([onChange, handleChange]),
    onExpand: composeEventHandlers([onExpand, handleExpand])
  }));
}

ExpandableSearch.propTypes = Search.propTypes;

export { ExpandableSearch as default };
