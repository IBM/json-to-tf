/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default, { useState } from 'react';
import { Warning, Incomplete, CheckmarkOutline, CircleDash } from '@carbon/icons-react';
import { usePrefix } from '../../internal/usePrefix.js';
import { matches } from '../../internal/keyboard/match.js';
import { Enter, Space } from '../../internal/keyboard/keys.js';

var _excluded = ["children", "className", "currentIndex", "onChange", "spaceEqually", "vertical"],
    _excluded2 = ["label", "description", "className", "current", "complete", "invalid", "secondaryLabel", "disabled", "onClick", "translateWithId"];
var defaultTranslations = {
  'carbon.progress-step.complete': 'Complete',
  'carbon.progress-step.incomplete': 'Incomplete',
  'carbon.progress-step.current': 'Current',
  'carbon.progress-step.invalid': 'Invalid'
};

function translateWithId(messageId) {
  return defaultTranslations[messageId];
}

function ProgressIndicator(_ref) {
  var _cx;

  var children = _ref.children,
      customClassName = _ref.className,
      _ref$currentIndex = _ref.currentIndex,
      controlledIndex = _ref$currentIndex === void 0 ? 0 : _ref$currentIndex,
      onChange = _ref.onChange,
      spaceEqually = _ref.spaceEqually,
      vertical = _ref.vertical,
      rest = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();

  var _useState = useState(controlledIndex),
      _useState2 = _slicedToArray(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];

  var _useState3 = useState(controlledIndex),
      _useState4 = _slicedToArray(_useState3, 2),
      prevControlledIndex = _useState4[0],
      setPrevControlledIndex = _useState4[1];

  var className = cx((_cx = {}, _defineProperty(_cx, "".concat(prefix, "--progress"), true), _defineProperty(_cx, "".concat(prefix, "--progress--vertical"), vertical), _defineProperty(_cx, "".concat(prefix, "--progress--space-equal"), spaceEqually && !vertical), _defineProperty(_cx, customClassName, customClassName), _cx));

  if (controlledIndex !== prevControlledIndex) {
    setCurrentIndex(controlledIndex);
    setPrevControlledIndex(controlledIndex);
  }

  return /*#__PURE__*/React__default.createElement("ul", _extends({
    className: className
  }, rest), React__default.Children.map(children, function (child, index) {
    // only setup click handlers if onChange event is passed
    var onClick = onChange ? function () {
      return onChange(index);
    } : undefined;

    if (index === currentIndex) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        complete: child.props.complete,
        current: child.props.complete ? false : true,
        index: index,
        onClick: onClick
      });
    }

    if (index < currentIndex) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        complete: true,
        index: index,
        onClick: onClick
      });
    }

    if (index > currentIndex) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        complete: child.props.complete || false,
        index: index,
        onClick: onClick
      });
    }

    return null;
  }));
}

ProgressIndicator.propTypes = {
  /**
   * Provide `<ProgressStep>` components to be rendered in the
   * `<ProgressIndicator>`
   */
  children: PropTypes.node,

  /**
   * Provide an optional className to be applied to the containing node
   */
  className: PropTypes.string,

  /**
   * Optionally specify the current step array index
   */
  currentIndex: PropTypes.number,

  /**
   * Optional callback called if a ProgressStep is clicked on.  Returns the index of the step.
   */
  onChange: PropTypes.func,

  /**
   * Specify whether the progress steps should be split equally in size in the div
   */
  spaceEqually: PropTypes.bool,

  /**
   * Determines whether or not the ProgressIndicator should be rendered vertically.
   */
  vertical: PropTypes.bool
};

function ProgressStep(_ref2) {
  var _cx2;

  var label = _ref2.label,
      description = _ref2.description,
      className = _ref2.className,
      current = _ref2.current,
      complete = _ref2.complete,
      invalid = _ref2.invalid,
      secondaryLabel = _ref2.secondaryLabel,
      disabled = _ref2.disabled,
      onClick = _ref2.onClick,
      t = _ref2.translateWithId,
      rest = _objectWithoutProperties(_ref2, _excluded2);

  var prefix = usePrefix();
  var classes = cx((_cx2 = {}, _defineProperty(_cx2, "".concat(prefix, "--progress-step"), true), _defineProperty(_cx2, "".concat(prefix, "--progress-step--current"), current), _defineProperty(_cx2, "".concat(prefix, "--progress-step--complete"), complete), _defineProperty(_cx2, "".concat(prefix, "--progress-step--incomplete"), !complete && !current), _defineProperty(_cx2, "".concat(prefix, "--progress-step--disabled"), disabled), _defineProperty(_cx2, className, className), _cx2));

  var handleKeyDown = function handleKeyDown(e) {
    if (matches(e, [Enter, Space])) {
      onClick();
    }
  }; // eslint-disable-next-line react/prop-types


  var SVGIcon = function SVGIcon(_ref3) {
    var complete = _ref3.complete,
        current = _ref3.current,
        description = _ref3.description,
        invalid = _ref3.invalid,
        prefix = _ref3.prefix;

    if (invalid) {
      return /*#__PURE__*/React__default.createElement(Warning, {
        className: "".concat(prefix, "--progress__warning")
      }, /*#__PURE__*/React__default.createElement("title", null, description));
    }

    if (current) {
      return /*#__PURE__*/React__default.createElement(Incomplete, null, /*#__PURE__*/React__default.createElement("title", null, description));
    }

    if (complete) {
      return /*#__PURE__*/React__default.createElement(CheckmarkOutline, null, /*#__PURE__*/React__default.createElement("title", null, description));
    }

    return /*#__PURE__*/React__default.createElement(CircleDash, null, /*#__PURE__*/React__default.createElement("title", null, description));
  };

  var message = t('carbon.progress-step.incomplete');

  if (current) {
    message = t('carbon.progress-step.current');
  }

  if (complete) {
    message = t('carbon.progress-step.complete');
  }

  if (invalid) {
    message = t('carbon.progress-step.invalid');
  }

  return /*#__PURE__*/React__default.createElement("li", {
    className: classes
  }, /*#__PURE__*/React__default.createElement("button", _extends({
    type: "button",
    className: cx("".concat(prefix, "--progress-step-button"), _defineProperty({}, "".concat(prefix, "--progress-step-button--unclickable"), !onClick || current)),
    disabled: disabled,
    "aria-disabled": disabled,
    tabIndex: !current && onClick && !disabled ? 0 : -1,
    onClick: !current ? onClick : undefined,
    onKeyDown: handleKeyDown,
    title: label
  }, rest), /*#__PURE__*/React__default.createElement(SVGIcon, {
    complete: complete,
    current: current,
    description: description,
    invalid: invalid,
    prefix: prefix
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--progress-text")
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "".concat(prefix, "--progress-label")
  }, label), secondaryLabel !== null && secondaryLabel !== undefined ? /*#__PURE__*/React__default.createElement("p", {
    className: "".concat(prefix, "--progress-optional")
  }, secondaryLabel) : null), /*#__PURE__*/React__default.createElement("span", {
    className: "".concat(prefix, "--assistive-text")
  }, message), /*#__PURE__*/React__default.createElement("span", {
    className: "".concat(prefix, "--progress-line")
  })));
}

ProgressStep.propTypes = {
  /**
   * Provide an optional className to be applied to the containing `<li>` node
   */
  className: PropTypes.string,

  /**
   * Specify whether the step has been completed
   */
  complete: PropTypes.bool,

  /**
   * Specify whether the step is the current step
   */
  current: PropTypes.bool,

  /**
   * Provide a description for the `<ProgressStep>`
   */
  description: PropTypes.string,

  /**
   * Specify whether the step is disabled
   */
  disabled: PropTypes.bool,

  /**
   * Index of the current step within the ProgressIndicator
   */
  index: PropTypes.number,

  /**
   * Specify whether the step is invalid
   */
  invalid: PropTypes.bool,

  /**
   * Provide the label for the `<ProgressStep>`
   */
  label: PropTypes.node.isRequired,

  /**
   * A callback called if the step is clicked or the enter key is pressed
   */
  onClick: PropTypes.func,

  /**
   * Provide the props that describe a progress step tooltip
   */
  overflowTooltipProps: PropTypes.object,

  /**
   * Provide an optional secondary label
   */
  secondaryLabel: PropTypes.string,

  /**
   * The ID of the tooltip content.
   */
  tooltipId: PropTypes.string,

  /**
   * Optional method that takes in a message id and returns an
   * internationalized string.
   */
  translateWithId: PropTypes.func
};
ProgressStep.defaultProps = {
  translateWithId: translateWithId
};

export { ProgressIndicator, ProgressStep };
