/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends, toConsumableArray as _toConsumableArray } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { useRef } from 'react';
import cx from 'classnames';
import { usePrefix } from '../../internal/usePrefix.js';
import useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';

var _excluded = ["paragraph", "lineCount", "width", "heading", "className"];
var randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];

function getRandomInt(min, max, n) {
  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;
}

var SkeletonText = function SkeletonText(_ref) {
  var _classNames;

  var paragraph = _ref.paragraph,
      lineCount = _ref.lineCount,
      width = _ref.width,
      heading = _ref.heading,
      className = _ref.className,
      other = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var skeletonTextClasses = cx((_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--skeleton__text"), true), _defineProperty(_classNames, "".concat(prefix, "--skeleton__heading"), heading), _defineProperty(_classNames, className, className), _classNames));
  var widthNum = parseInt(width, 10);
  var widthPx = width.includes('px');
  var widthPercent = width.includes('%');
  var lineCountNumber;

  if (!paragraph) {
    lineCountNumber = '1';
  } else {
    lineCountNumber = lineCount;
  }

  var refs = useRef([]);
  useIsomorphicEffect(function () {
    refs.current.map(function (item, j) {
      var randomPercentWidth = getRandomInt(0, 75, j) + 'px';
      var randomPxWidth = getRandomInt(widthNum - 75, widthNum, j) + 'px';

      if (item) {
        if (widthPercent && paragraph) {
          item.style.width = "calc(".concat(width, " - ").concat(randomPercentWidth, ")");
        } else if (widthPx && paragraph) {
          item.style.width = randomPxWidth;
        } else {
          item.style.width = width;
        }
      }
    });
  }, [lineCountNumber, paragraph, refs, width, widthNum, widthPercent, widthPx]);
  var lines = [];

  for (var i = 0; i < lineCountNumber; i++) {
    lines.push( /*#__PURE__*/React__default.createElement("p", _extends({
      className: skeletonTextClasses,
      key: i,
      ref: function ref(el) {
        return refs.current = [].concat(_toConsumableArray(refs.current), [el]);
      }
    }, other)));
  }

  if (lineCountNumber !== '1') {
    return /*#__PURE__*/React__default.createElement("div", null, lines);
  } else {
    return lines;
  }
};

SkeletonText.propTypes = {
  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * generates skeleton text at a larger size
   */
  heading: PropTypes.bool,

  /**
   * the number of lines shown if paragraph is true
   */
  lineCount: PropTypes.number,

  /**
   * will generate multiple lines of text
   */
  paragraph: PropTypes.bool,

  /**
   * width (in px or %) of single line of text or max-width of paragraph lines
   */
  width: PropTypes.string
};
SkeletonText.defaultProps = {
  paragraph: false,
  width: '100%',
  heading: false,
  lineCount: 3
};
var SkeletonText$1 = SkeletonText;

export { SkeletonText$1 as default };
