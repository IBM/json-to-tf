/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { useContext, useState, useRef } from 'react';
import cx from 'classnames';
import deprecate from '../../prop-types/deprecate.js';
import { WarningFilled } from '@carbon/icons-react';
import { useFeatureFlag } from '../FeatureFlags/index.js';
import { usePrefix } from '../../internal/usePrefix.js';
import '../FluidForm/FluidForm.js';
import { FormContext } from '../FluidForm/FormContext.js';
import { useAnnouncer } from '../../internal/useAnnouncer.js';
import useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';
import { useMergedRefs } from '../../internal/useMergedRefs.js';

var _excluded = ["className", "id", "labelText", "hideLabel", "onChange", "onClick", "invalid", "invalidText", "helperText", "light", "placeholder", "enableCounter", "maxCount"];
var TextArea = /*#__PURE__*/React__default.forwardRef(function (props, forwardRef) {
  var _classNames, _classNames4;

  var className = props.className,
      id = props.id,
      labelText = props.labelText,
      hideLabel = props.hideLabel,
      _onChange = props.onChange,
      _onClick = props.onClick,
      invalid = props.invalid,
      invalidText = props.invalidText,
      helperText = props.helperText,
      light = props.light,
      placeholder = props.placeholder,
      enableCounter = props.enableCounter,
      maxCount = props.maxCount,
      other = _objectWithoutProperties(props, _excluded);

  var prefix = usePrefix();

  var _useContext = useContext(FormContext),
      isFluid = _useContext.isFluid;

  var enabled = useFeatureFlag('enable-v11-release');
  var defaultValue = other.defaultValue,
      value = other.value,
      disabled = other.disabled;

  var _useState = useState((defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.toString().length) || (value === null || value === void 0 ? void 0 : value.toString().length) || 0),
      _useState2 = _slicedToArray(_useState, 2),
      textCount = _useState2[0],
      setTextCount = _useState2[1];

  var textareaProps = {
    id: id,
    onChange: function onChange(evt) {
      if (!other.disabled && _onChange) {
        var _evt$target$value;

        setTextCount((_evt$target$value = evt.target.value) === null || _evt$target$value === void 0 ? void 0 : _evt$target$value.length);

        _onChange(evt);
      }
    },
    onClick: function onClick(evt) {
      if (!other.disabled && _onClick) {
        _onClick(evt);
      }
    }
  };

  if (enableCounter) {
    textareaProps.maxLength = maxCount;
  }

  var ariaAnnouncement = useAnnouncer(textCount, maxCount);
  var labelClasses = cx("".concat(prefix, "--label"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--visually-hidden"), hideLabel && !isFluid), _defineProperty(_classNames, "".concat(prefix, "--label--disabled"), disabled), _classNames));
  var label = labelText ? /*#__PURE__*/React__default.createElement("label", {
    htmlFor: id,
    className: labelClasses
  }, labelText) : null;
  var counterClasses = cx("".concat(prefix, "--label"), _defineProperty({}, "".concat(prefix, "--label--disabled"), disabled));
  var counter = enableCounter && maxCount ? /*#__PURE__*/React__default.createElement("div", {
    className: counterClasses
  }, "".concat(textCount, "/").concat(maxCount)) : null;
  var helperTextClasses = cx("".concat(prefix, "--form__helper-text"), _defineProperty({}, "".concat(prefix, "--form__helper-text--disabled"), other.disabled));
  var helper = helperText ? /*#__PURE__*/React__default.createElement("div", {
    className: helperTextClasses
  }, helperText) : null;
  var errorId = id + '-error-msg';
  var error = invalid ? /*#__PURE__*/React__default.createElement("div", {
    role: "alert",
    className: "".concat(prefix, "--form-requirement"),
    id: errorId
  }, invalidText, isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: "".concat(prefix, "--text-area__invalid-icon")
  })) : null;
  var textareaClasses = cx("".concat(prefix, "--text-area"), [enabled ? null : className], (_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefix, "--text-area--light"), light), _defineProperty(_classNames4, "".concat(prefix, "--text-area--invalid"), invalid), _classNames4));
  var textareaRef = useRef(null);
  var ref = useMergedRefs([forwardRef, textareaRef]);
  useIsomorphicEffect(function () {
    if (other.cols && textareaRef.current) {
      textareaRef.current.style.width = '';
      textareaRef.current.style.resize = 'none';
    } else if (textareaRef.current) {
      textareaRef.current.style.width = "100%";
    }
  }, [other.cols]);
  var input = /*#__PURE__*/React__default.createElement("textarea", _extends({}, other, textareaProps, {
    placeholder: placeholder,
    className: textareaClasses,
    "aria-invalid": invalid,
    "aria-describedby": invalid ? errorId : undefined,
    disabled: other.disabled,
    readOnly: other.readOnly,
    ref: ref
  }));
  return /*#__PURE__*/React__default.createElement("div", {
    className: enabled ? cx("".concat(prefix, "--form-item"), className) : "".concat(prefix, "--form-item")
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--text-area__label-wrapper")
  }, label, counter), /*#__PURE__*/React__default.createElement("div", {
    className: cx("".concat(prefix, "--text-area__wrapper"), _defineProperty({}, "".concat(prefix, "--text-area__wrapper--readonly"), other.readOnly)),
    "data-invalid": invalid || null
  }, invalid && !isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: "".concat(prefix, "--text-area__invalid-icon")
  }), input, /*#__PURE__*/React__default.createElement("span", {
    className: "".concat(prefix, "--text-area__counter-alert"),
    role: "alert"
  }, ariaAnnouncement), isFluid && /*#__PURE__*/React__default.createElement("hr", {
    className: "".concat(prefix, "--text-area__divider")
  }), isFluid && invalid ? error : null), invalid && !isFluid ? error : helper);
});
TextArea.displayName = 'TextArea';
TextArea.propTypes = {
  /**
   * Provide a custom className that is applied directly to the underlying
   * `<textarea>` node
   */
  className: PropTypes.string,

  /**
   * Specify the `cols` attribute for the underlying `<textarea>` node
   */
  cols: PropTypes.number,

  /**
   * Optionally provide the default value of the `<textarea>`
   */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Specify whether the control is disabled
   */
  disabled: PropTypes.bool,

  /**
   * Specify whether to display the character counter
   */
  enableCounter: PropTypes.bool,

  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes.node,

  /**
   * Specify whether you want the underlying label to be visually hidden
   */
  hideLabel: PropTypes.bool,

  /**
   * Provide a unique identifier for the control
   */
  id: PropTypes.string,

  /**
   * Specify whether the control is currently invalid
   */
  invalid: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in an invalid state
   */
  invalidText: PropTypes.node,

  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes.node.isRequired,

  /**
   * `true` to use the light version. For use on $ui-01 backgrounds only.
   * Don't use this to make tile background color same as container background color.
   */
  light: deprecate(PropTypes.bool, 'The `light` prop for `TextArea` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),

  /**
   * Max character count allowed for the textarea. This is needed in order for enableCounter to display
   */
  maxCount: PropTypes.number,

  /**
   * Optionally provide an `onChange` handler that is called whenever `<textarea>`
   * is updated
   */
  onChange: PropTypes.func,

  /**
   * Optionally provide an `onClick` handler that is called whenever the
   * `<textarea>` is clicked
   */
  onClick: PropTypes.func,

  /**
   * Specify the placeholder attribute for the `<textarea>`
   */
  placeholder: PropTypes.string,

  /**
   * Whether the textarea should be read-only
   */
  readOnly: PropTypes.bool,

  /**
   * Specify the rows attribute for the `<textarea>`
   */
  rows: PropTypes.number,

  /**
   * Provide the current value of the `<textarea>`
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};
TextArea.defaultProps = {
  disabled: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  placeholder: '',
  rows: 4,
  invalid: false,
  invalidText: '',
  helperText: '',
  enableCounter: false,
  maxCount: undefined
};
var TextArea$1 = TextArea;

export { TextArea$1 as default };
