/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default from 'react';
import cx from 'classnames';
import FluidTextInput from '../FluidTextInput/FluidTextInput.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { WarningFilled, WarningAltFilled } from '@carbon/icons-react';

var _excluded = ["className", "children", "disabled", "invalid", "invalidText", "warn", "warnText"];
var FluidTimePicker = /*#__PURE__*/React__default.forwardRef(function FluidTimePicker(_ref, ref) {
  var _classnames;

  var className = _ref.className,
      children = _ref.children,
      disabled = _ref.disabled,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      warn = _ref.warn,
      warnText = _ref.warnText,
      other = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var classNames = cx(className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid"), true), _defineProperty(_classnames, "".concat(prefix, "--time-picker--equal-width"), (children === null || children === void 0 ? void 0 : children.length) !== 2), _defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid--disabled"), disabled), _defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid--invalid"), invalid), _defineProperty(_classnames, "".concat(prefix, "--time-picker--fluid--warning"), warn), _classnames));

  var errorText = function errorText() {
    if (invalid) {
      return invalidText;
    }

    if (warn) {
      return warnText;
    }
  };

  var error = invalid || warn;
  return /*#__PURE__*/React__default.createElement("div", {
    className: classNames
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--time-picker--fluid__wrapper")
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--time-picker__input")
  }, /*#__PURE__*/React__default.createElement(FluidTextInput, _extends({
    disabled: disabled,
    ref: ref
  }, other))), disabled ? React__default.Children.toArray(children).map(function (child) {
    return /*#__PURE__*/React__default.cloneElement(child, {
      disabled: disabled
    });
  }) : children), error && /*#__PURE__*/React__default.createElement("hr", {
    className: "".concat(prefix, "--time-picker__divider")
  }), error && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, errorText()), error && invalid ? /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: "".concat(prefix, "--time-picker__icon ").concat(prefix, "--time-picker__icon--invalid")
  }) : /*#__PURE__*/React__default.createElement(WarningAltFilled, {
    className: "".concat(prefix, "--time-picker__icon ").concat(prefix, "--time-picker__icon--warn")
  }));
});
FluidTimePicker.propTypes = {
  /**
   * The child node(s)
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the outer FluidTimePicker wrapper
   */
  className: PropTypes.string,

  /**
   * Specify whether the `<input>` should be disabled
   */
  disabled: PropTypes.bool,

  /**
   * Specify whether or not the control is invalid
   */
  invalid: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in error state
   */
  invalidText: PropTypes.node,

  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes.node.isRequired,

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes.node
};
var FluidTimePicker$1 = FluidTimePicker;

export { FluidTimePicker$1 as default };
