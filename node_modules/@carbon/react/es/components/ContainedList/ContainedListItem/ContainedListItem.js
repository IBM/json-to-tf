/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { defineProperty as _defineProperty } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import React__default from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { usePrefix } from '../../../internal/usePrefix.js';

function ContainedListItem(_ref) {
  var _classNames;

  var action = _ref.action,
      children = _ref.children,
      className = _ref.className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onClick = _ref.onClick,
      IconElement = _ref.renderIcon;
  var prefix = usePrefix();
  var isClickable = onClick !== undefined;
  var classes = cx("".concat(prefix, "--contained-list-item"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--contained-list-item--clickable"), isClickable), _defineProperty(_classNames, "".concat(prefix, "--contained-list-item--with-icon"), IconElement), _defineProperty(_classNames, "".concat(prefix, "--contained-list-item--with-action"), action), _classNames));
  var content = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, IconElement && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--contained-list-item__icon")
  }, /*#__PURE__*/React__default.createElement(IconElement, null)), /*#__PURE__*/React__default.createElement("div", null, children));
  return /*#__PURE__*/React__default.createElement("li", {
    className: classes
  }, isClickable ? /*#__PURE__*/React__default.createElement("button", {
    className: "".concat(prefix, "--contained-list-item__content"),
    type: "button",
    disabled: disabled,
    onClick: onClick
  }, content) : /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--contained-list-item__content")
  }, content), action && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--contained-list-item__action")
  }, action));
}

ContainedListItem.propTypes = {
  /**
   * A slot for a possible interactive element to render within the item.
   */
  action: PropTypes.node,

  /**
   * The content of this item. Must not contain any interactive elements. Use props.action to include those.
   */
  children: PropTypes.node,

  /**
   * Additional CSS class names.
   */
  className: PropTypes.string,

  /**
   * Whether this item is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Provide an optional function to be called when the item is clicked.
   */
  onClick: PropTypes.func,

  /**
   * Provide an optional icon to render in front of the item's content.
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
};

export { ContainedListItem as default };
